// Code generated by command: avogen -data ../data -output ztable_test.go godatatest. DO NOT EDIT.

package inst_test

import (
	"reflect"
	"testing"

	"github.com/mmcloughlin/avo/internal/inst"
)

var raw = []inst.Instruction{inst.Instruction{Opcode: "ADCB", Summary: "Add with Carry", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADCL", Summary: "Add with Carry", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADCQ", Summary: "Add with Carry", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADCW", Summary: "Add with Carry", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADCXL", Summary: "Unsigned Integer Addition of Two Operands with Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADCXQ", Summary: "Unsigned Integer Addition of Two Operands with Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADDB", Summary: "Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADDL", Summary: "Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADDPD", Summary: "Add Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADDPS", Summary: "Add Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADDQ", Summary: "Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADDSD", Summary: "Add Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADDSS", Summary: "Add Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADDSUBPD", Summary: "Packed Double-FP Add/Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADDSUBPS", Summary: "Packed Single-FP Add/Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADDW", Summary: "Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADOXL", Summary: "Unsigned Integer Addition of Two Operands with Overflow Flag", Forms: []inst.Form{inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ADOXQ", Summary: "Unsigned Integer Addition of Two Operands with Overflow Flag", Forms: []inst.Form{inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"ADX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "AESDEC", Summary: "Perform One Round of an AES Decryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "AESDECLAST", Summary: "Perform Last Round of an AES Decryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "AESENC", Summary: "Perform One Round of an AES Encryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "AESENCLAST", Summary: "Perform Last Round of an AES Encryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "AESIMC", Summary: "Perform the AES InvMixColumn Transformation", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "AESKEYGENASSIST", Summary: "AES Round Key Generation Assist", Forms: []inst.Form{inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AES"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ANDB", Summary: "Logical AND", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ANDL", Summary: "Logical AND", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ANDNL", Summary: "Logical AND NOT", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ANDNPD", Summary: "Bitwise Logical AND NOT of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ANDNPS", Summary: "Bitwise Logical AND NOT of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ANDNQ", Summary: "Logical AND NOT", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ANDPD", Summary: "Bitwise Logical AND of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ANDPS", Summary: "Bitwise Logical AND of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ANDQ", Summary: "Logical AND", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ANDW", Summary: "Logical AND", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BEXTRL", Summary: "Bit Field Extract", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BEXTRQ", Summary: "Bit Field Extract", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BLENDPD", Summary: "Blend Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BLENDPS", Summary: " Blend Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BLENDVPD", Summary: " Variable Blend Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BLENDVPS", Summary: " Variable Blend Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BLSIL", Summary: "Isolate Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BLSIQ", Summary: "Isolate Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BLSMSKL", Summary: "Mask From Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BLSMSKQ", Summary: "Mask From Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BLSRL", Summary: "Reset Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BLSRQ", Summary: "Reset Lowest Set Bit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BSFL", Summary: "Bit Scan Forward", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BSFQ", Summary: "Bit Scan Forward", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BSFW", Summary: "Bit Scan Forward", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BSRL", Summary: "Bit Scan Reverse", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BSRQ", Summary: "Bit Scan Reverse", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BSRW", Summary: "Bit Scan Reverse", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BSWAPL", Summary: "Byte Swap", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BSWAPQ", Summary: "Byte Swap", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTCL", Summary: "Bit Test and Complement", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTCQ", Summary: "Bit Test and Complement", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTCW", Summary: "Bit Test and Complement", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTL", Summary: "Bit Test", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTQ", Summary: "Bit Test", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTRL", Summary: "Bit Test and Reset", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTRQ", Summary: "Bit Test and Reset", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTRW", Summary: "Bit Test and Reset", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTSL", Summary: "Bit Test and Set", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTSQ", Summary: "Bit Test and Set", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTSW", Summary: "Bit Test and Set", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BTW", Summary: "Bit Test", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BZHIL", Summary: "Zero High Bits Starting with Specified Bit Position", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "BZHIQ", Summary: "Zero High Bits Starting with Specified Bit Position", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CALL", Summary: "Call Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CBW", Summary: "Convert Byte to Word", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x2}, inst.ImplicitOperand{Register: "al", Action: 0x1}}}}}, inst.Instruction{Opcode: "CDQ", Summary: "Convert Doubleword to Quadword", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}}}}, inst.Instruction{Opcode: "CDQE", Summary: "Convert Doubleword to Quadword", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "rax", Action: 0x2}}}}}, inst.Instruction{Opcode: "CLC", Summary: "Clear Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CLD", Summary: "Clear Direction Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CLFLUSH", Summary: "Flush Cache Line", Forms: []inst.Form{inst.Form{ISA: []string{"CLFLUSH"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CLFLUSHOPT", Summary: "Flush Cache Line Optimized", Forms: []inst.Form{inst.Form{ISA: []string{"CLFLUSHOPT"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMC", Summary: "Complement Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLCC", Summary: "Move if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLCS", Summary: "Move if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLEQ", Summary: "Move if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLGE", Summary: "Move if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLGT", Summary: "Move if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLHI", Summary: "Move if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLLE", Summary: "Move if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLLS", Summary: "Move if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLLT", Summary: "Move if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLMI", Summary: "Move if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLNE", Summary: "Move if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLOC", Summary: "Move if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLOS", Summary: "Move if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLPC", Summary: "Move if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLPL", Summary: "Move if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVLPS", Summary: "Move if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQCC", Summary: "Move if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQCS", Summary: "Move if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQEQ", Summary: "Move if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQGE", Summary: "Move if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQGT", Summary: "Move if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQHI", Summary: "Move if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQLE", Summary: "Move if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQLS", Summary: "Move if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQLT", Summary: "Move if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQMI", Summary: "Move if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQNE", Summary: "Move if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQOC", Summary: "Move if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQOS", Summary: "Move if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQPC", Summary: "Move if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQPL", Summary: "Move if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVQPS", Summary: "Move if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWCC", Summary: "Move if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWCS", Summary: "Move if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWEQ", Summary: "Move if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWGE", Summary: "Move if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWGT", Summary: "Move if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWHI", Summary: "Move if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWLE", Summary: "Move if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWLS", Summary: "Move if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWLT", Summary: "Move if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWMI", Summary: "Move if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWNE", Summary: "Move if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWOC", Summary: "Move if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWOS", Summary: "Move if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWPC", Summary: "Move if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWPL", Summary: "Move if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMOVWPS", Summary: "Move if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"CMOV"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPB", Summary: "Compare Two Operands", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "al", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPL", Summary: "Compare Two Operands", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "eax", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPPD", Summary: "Compare Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPPS", Summary: "Compare Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPQ", Summary: "Compare Two Operands", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rax", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPSD", Summary: "Compare Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPSS", Summary: "Compare Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPW", Summary: "Compare Two Operands", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "ax", Action: 0x1}, inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPXCHG16B", Summary: "Compare and Exchange 16 Bytes", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rbx", Action: 0x1}, inst.ImplicitOperand{Register: "rcx", Action: 0x1}, inst.ImplicitOperand{Register: "rdx", Action: 0x3}}}}}, inst.Instruction{Opcode: "CMPXCHG8B", Summary: "Compare and Exchange 8 Bytes", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "ebx", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x3}}}}}, inst.Instruction{Opcode: "CMPXCHGB", Summary: "Compare and Exchange", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPXCHGL", Summary: "Compare and Exchange", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPXCHGQ", Summary: "Compare and Exchange", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CMPXCHGW", Summary: "Compare and Exchange", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "COMISD", Summary: "Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "COMISS", Summary: "Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CPUID", Summary: "CPU Identification", Forms: []inst.Form{inst.Form{ISA: []string{"CPUID"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "ebx", Action: 0x2}, inst.ImplicitOperand{Register: "ecx", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}}}}, inst.Instruction{Opcode: "CQO", Summary: "Convert Quadword to Octaword", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x1}, inst.ImplicitOperand{Register: "rdx", Action: 0x2}}}}}, inst.Instruction{Opcode: "CRC32B", Summary: "Accumulate CRC32 Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CRC32L", Summary: "Accumulate CRC32 Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CRC32Q", Summary: "Accumulate CRC32 Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CRC32W", Summary: "Accumulate CRC32 Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTPD2PL", Summary: "Convert Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTPD2PS", Summary: "Convert Packed Double-Precision FP Values to Packed Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTPL2PD", Summary: "Convert Packed Dword Integers to Packed Double-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTPL2PS", Summary: "Convert Packed Dword Integers to Packed Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTPS2PD", Summary: "Convert Packed Single-Precision FP Values to Packed Double-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTPS2PL", Summary: "Convert Packed Single-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTSD2SL", Summary: "Convert Scalar Double-Precision FP Value to Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTSD2SS", Summary: "Convert Scalar Double-Precision FP Value to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTSL2SD", Summary: "Convert Dword Integer to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTSL2SS", Summary: "Convert Dword Integer to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTSQ2SD", Summary: "Convert Dword Integer to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTSQ2SS", Summary: "Convert Dword Integer to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTSS2SD", Summary: "Convert Scalar Single-Precision FP Value to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTSS2SL", Summary: "Convert Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTTPD2PL", Summary: "Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTTPS2PL", Summary: "Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTTSD2SL", Summary: "Convert with Truncation Scalar Double-Precision FP Value to Signed Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CVTTSS2SL", Summary: "Convert with Truncation Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "CWD", Summary: "Convert Word to Doubleword", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x1}, inst.ImplicitOperand{Register: "dx", Action: 0x2}}}}}, inst.Instruction{Opcode: "CWDE", Summary: "Convert Word to Doubleword", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x1}, inst.ImplicitOperand{Register: "eax", Action: 0x2}}}}}, inst.Instruction{Opcode: "DECB", Summary: "Decrement by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "DECL", Summary: "Decrement by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "DECQ", Summary: "Decrement by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "DECW", Summary: "Decrement by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "DIVB", Summary: "Unsigned Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}}}}}, inst.Instruction{Opcode: "DIVL", Summary: "Unsigned Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x3}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x3}}}}}, inst.Instruction{Opcode: "DIVPD", Summary: "Divide Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "DIVPS", Summary: "Divide Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "DIVQ", Summary: "Unsigned Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x3}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x3}}}}}, inst.Instruction{Opcode: "DIVSD", Summary: "Divide Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "DIVSS", Summary: "Divide Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "DIVW", Summary: "Unsigned Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x3}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x3}}}}}, inst.Instruction{Opcode: "DPPD", Summary: "Dot Product of Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "DPPS", Summary: "Dot Product of Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "EXTRACTPS", Summary: "Extract Packed Single Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm2u", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm2u", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "HADDPD", Summary: "Packed Double-FP Horizontal Add", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "HADDPS", Summary: "Packed Single-FP Horizontal Add", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "HSUBPD", Summary: "Packed Double-FP Horizontal Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "HSUBPS", Summary: "Packed Single-FP Horizontal Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "IDIVB", Summary: "Signed Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}}}}}, inst.Instruction{Opcode: "IDIVL", Summary: "Signed Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x3}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x3}}}}}, inst.Instruction{Opcode: "IDIVQ", Summary: "Signed Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x3}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x3}}}}}, inst.Instruction{Opcode: "IDIVW", Summary: "Signed Divide", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x3}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x3}}}}}, inst.Instruction{Opcode: "IMUL3L", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "IMUL3Q", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "IMUL3W", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "IMULB", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x2}, inst.ImplicitOperand{Register: "al", Action: 0x1}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x2}, inst.ImplicitOperand{Register: "al", Action: 0x1}}}}}, inst.Instruction{Opcode: "IMULL", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "IMULQ", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x2}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x2}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "IMULW", Summary: "Signed Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x2}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x2}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "INCB", Summary: "Increment by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "INCL", Summary: "Increment by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "INCQ", Summary: "Increment by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "INCW", Summary: "Increment by 1", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "INSERTPS", Summary: "Insert Packed Single Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "INT", Summary: "Call to Interrupt Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "3", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JA", Summary: "Jump if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JAE", Summary: "Jump if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JB", Summary: "Jump if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JBE", Summary: "Jump if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JC", Summary: "Jump if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JCC", Summary: "Jump if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JCS", Summary: "Jump if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JCXZL", Summary: "Jump if ECX register is 0", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ecx", Action: 0x1}}}}}, inst.Instruction{Opcode: "JCXZQ", Summary: "Jump if RCX register is 0", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rcx", Action: 0x1}}}}}, inst.Instruction{Opcode: "JE", Summary: "Jump if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JEQ", Summary: "Jump if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JG", Summary: "Jump if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JGE", Summary: "Jump if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JGT", Summary: "Jump if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JHI", Summary: "Jump if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JHS", Summary: "Jump if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JL", Summary: "Jump if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JLE", Summary: "Jump if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JLO", Summary: "Jump if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JLS", Summary: "Jump if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JLT", Summary: "Jump if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JMI", Summary: "Jump if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JMP", Summary: "Jump Unconditionally", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNA", Summary: "Jump if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNAE", Summary: "Jump if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNB", Summary: "Jump if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNBE", Summary: "Jump if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNC", Summary: "Jump if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNE", Summary: "Jump if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNG", Summary: "Jump if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNGE", Summary: "Jump if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNL", Summary: "Jump if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNLE", Summary: "Jump if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNO", Summary: "Jump if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNP", Summary: "Jump if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNS", Summary: "Jump if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JNZ", Summary: "Jump if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JO", Summary: "Jump if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JOC", Summary: "Jump if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JOS", Summary: "Jump if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JP", Summary: "Jump if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JPC", Summary: "Jump if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JPE", Summary: "Jump if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JPL", Summary: "Jump if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JPO", Summary: "Jump if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JPS", Summary: "Jump if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JS", Summary: "Jump if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "JZ", Summary: "Jump if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rel32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "LDDQU", Summary: "Load Unaligned Integer 128 Bits", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "LDMXCSR", Summary: "Load MXCSR Register", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "LEAL", Summary: "Load Effective Address", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "LEAQ", Summary: "Load Effective Address", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "LEAW", Summary: "Load Effective Address", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "LFENCE", Summary: "Load Fence", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "LZCNTL", Summary: "Count the Number of Leading Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "LZCNTQ", Summary: "Count the Number of Leading Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "LZCNTW", Summary: "Count the Number of Leading Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"LZCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MASKMOVDQU", Summary: "Store Selected Bytes of Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rdi", Action: 0x1}}}}}, inst.Instruction{Opcode: "MASKMOVOU", Summary: "Store Selected Bytes of Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rdi", Action: 0x1}}}}}, inst.Instruction{Opcode: "MAXPD", Summary: "Return Maximum Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MAXPS", Summary: "Return Maximum Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MAXSD", Summary: "Return Maximum Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MAXSS", Summary: "Return Maximum Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MFENCE", Summary: "Memory Fence", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MINPD", Summary: "Return Minimum Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MINPS", Summary: "Return Minimum Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MINSD", Summary: "Return Minimum Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MINSS", Summary: "Return Minimum Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MONITOR", Summary: "Monitor a Linear Address Range", Forms: []inst.Form{inst.Form{ISA: []string{"MONITOR"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x1}}}}}, inst.Instruction{Opcode: "MOVAPD", Summary: "Move Aligned Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVAPS", Summary: "Move Aligned Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVB", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVBELL", Summary: "Move Data After Swapping Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVBEQQ", Summary: "Move Data After Swapping Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVBEWW", Summary: "Move Data After Swapping Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"MOVBE"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVBLSX", Summary: "Move with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVBLZX", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVBQSX", Summary: "Move with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVBQZX", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVBWSX", Summary: "Move with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVBWZX", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVD", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm64", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVDDUP", Summary: "Move One Double-FP and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVDQ2Q", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm64", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVHLPS", Summary: "Move Packed Single-Precision Floating-Point Values High to Low", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVHPD", Summary: "Move High Packed Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVHPS", Summary: "Move High Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVL", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVLHPS", Summary: "Move Packed Single-Precision Floating-Point Values Low to High", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVLPD", Summary: "Move Low Packed Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVLPS", Summary: "Move Low Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVLQSX", Summary: "Move Doubleword to Quadword with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVMSKPD", Summary: "Extract Packed Double-Precision Floating-Point Sign Mask", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVMSKPS", Summary: "Extract Packed Single-Precision Floating-Point Sign Mask", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVNTDQ", Summary: "Store Double Quadword Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVNTDQA", Summary: "Load Double Quadword Non-Temporal Aligned Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVNTIL", Summary: "Store Doubleword Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVNTIQ", Summary: "Store Doubleword Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVNTO", Summary: "Store Double Quadword Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVNTPD", Summary: "Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVNTPS", Summary: "Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVO", Summary: "Move Aligned Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVOA", Summary: "Move Aligned Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVOU", Summary: "Move Unaligned Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVQ", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm64", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVSD", Summary: "Move Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVSHDUP", Summary: "Move Packed Single-FP High and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVSLDUP", Summary: "Move Packed Single-FP Low and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVSS", Summary: "Move Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVUPD", Summary: "Move Unaligned Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVUPS", Summary: "Move Unaligned Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVW", Summary: "Move", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVWLSX", Summary: "Move with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVWLZX", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVWQSX", Summary: "Move with Sign-Extension", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MOVWQZX", Summary: "Move with Zero-Extend", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MPSADBW", Summary: "Compute Multiple Packed Sums of Absolute Difference", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MULB", Summary: "Unsigned Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x2}, inst.ImplicitOperand{Register: "al", Action: 0x1}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x2}, inst.ImplicitOperand{Register: "al", Action: 0x1}}}}}, inst.Instruction{Opcode: "MULL", Summary: "Unsigned Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x3}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}}}}, inst.Instruction{Opcode: "MULPD", Summary: "Multiply Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MULPS", Summary: "Multiply Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MULQ", Summary: "Unsigned Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x2}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rax", Action: 0x3}, inst.ImplicitOperand{Register: "rdx", Action: 0x2}}}}}, inst.Instruction{Opcode: "MULSD", Summary: "Multiply Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MULSS", Summary: "Multiply Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "MULW", Summary: "Unsigned Multiply", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x2}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ax", Action: 0x3}, inst.ImplicitOperand{Register: "dx", Action: 0x2}}}}}, inst.Instruction{Opcode: "MULXL", Summary: "Unsigned Multiply Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "edx", Action: 0x1}}}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "edx", Action: 0x1}}}}}, inst.Instruction{Opcode: "MULXQ", Summary: "Unsigned Multiply Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rdx", Action: 0x1}}}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rdx", Action: 0x1}}}}}, inst.Instruction{Opcode: "MWAIT", Summary: "Monitor Wait", Forms: []inst.Form{inst.Form{ISA: []string{"MONITOR"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x1}}}}}, inst.Instruction{Opcode: "NEGB", Summary: "Two's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "NEGL", Summary: "Two's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "NEGQ", Summary: "Two's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "NEGW", Summary: "Two's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "NOP", Summary: "No Operation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "NOTB", Summary: "One's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "NOTL", Summary: "One's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "NOTQ", Summary: "One's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "NOTW", Summary: "One's Complement Negation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ORB", Summary: "Logical Inclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ORL", Summary: "Logical Inclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ORPD", Summary: "Bitwise Logical OR of Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ORPS", Summary: "Bitwise Logical OR of Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ORQ", Summary: "Logical Inclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ORW", Summary: "Logical Inclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PABSB", Summary: "Packed Absolute Value of Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PABSD", Summary: "Packed Absolute Value of Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PABSW", Summary: "Packed Absolute Value of Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PACKSSLW", Summary: "Pack Doublewords into Words with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PACKSSWB", Summary: "Pack Words into Bytes with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PACKUSDW", Summary: "Pack Doublewords into Words with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PACKUSWB", Summary: "Pack Words into Bytes with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PADDB", Summary: "Add Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PADDD", Summary: "Add Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PADDL", Summary: "Add Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PADDQ", Summary: "Add Packed Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PADDSB", Summary: "Add Packed Signed Byte Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PADDSW", Summary: "Add Packed Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PADDUSB", Summary: "Add Packed Unsigned Byte Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PADDUSW", Summary: "Add Packed Unsigned Word Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PADDW", Summary: "Add Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PALIGNR", Summary: "Packed Align Right", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PAND", Summary: "Packed Bitwise Logical AND", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PANDN", Summary: "Packed Bitwise Logical AND NOT", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PAUSE", Summary: "Spin Loop Hint", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PAVGB", Summary: "Average Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PAVGW", Summary: "Average Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PBLENDVB", Summary: "Variable Blend Packed Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PBLENDW", Summary: "Blend Packed Words", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PCLMULQDQ", Summary: "Carry-Less Quadword Multiplication", Forms: []inst.Form{inst.Form{ISA: []string{"PCLMULQDQ"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"PCLMULQDQ"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PCMPEQB", Summary: "Compare Packed Byte Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PCMPEQL", Summary: "Compare Packed Doubleword Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PCMPEQQ", Summary: "Compare Packed Quadword Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PCMPEQW", Summary: "Compare Packed Word Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PCMPESTRI", Summary: "Packed Compare Explicit Length Strings, Return Index", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x1}}}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x1}}}}}, inst.Instruction{Opcode: "PCMPESTRM", Summary: "Packed Compare Explicit Length Strings, Return Mask", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x1}, inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x1}, inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}}}}, inst.Instruction{Opcode: "PCMPGTB", Summary: "Compare Packed Signed Byte Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PCMPGTL", Summary: "Compare Packed Signed Doubleword Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PCMPGTQ", Summary: "Compare Packed Data for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PCMPGTW", Summary: "Compare Packed Signed Word Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PCMPISTRI", Summary: "Packed Compare Implicit Length Strings, Return Index", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ecx", Action: 0x2}}}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ecx", Action: 0x2}}}}}, inst.Instruction{Opcode: "PCMPISTRM", Summary: "Packed Compare Implicit Length Strings, Return Mask", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}}, inst.Form{ISA: []string{"SSE4.2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}}}}, inst.Instruction{Opcode: "PDEPL", Summary: "Parallel Bits Deposit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PDEPQ", Summary: "Parallel Bits Deposit", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PEXTL", Summary: "Parallel Bits Extract", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PEXTQ", Summary: "Parallel Bits Extract", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PEXTRB", Summary: "Extract Byte", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PEXTRD", Summary: "Extract Doubleword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PEXTRQ", Summary: "Extract Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PEXTRW", Summary: "Extract Word", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PHADDD", Summary: "Packed Horizontal Add Doubleword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PHADDSW", Summary: "Packed Horizontal Add Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PHADDW", Summary: "Packed Horizontal Add Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PHMINPOSUW", Summary: "Packed Horizontal Minimum of Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PHSUBD", Summary: "Packed Horizontal Subtract Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PHSUBSW", Summary: "Packed Horizontal Subtract Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PHSUBW", Summary: "Packed Horizontal Subtract Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PINSRB", Summary: "Insert Byte", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PINSRD", Summary: "Insert Doubleword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PINSRQ", Summary: "Insert Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PINSRW", Summary: "Insert Word", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMADDUBSW", Summary: "Multiply and Add Packed Signed and Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMADDWL", Summary: "Multiply and Add Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMAXSB", Summary: "Maximum of Packed Signed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMAXSD", Summary: "Maximum of Packed Signed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMAXSW", Summary: "Maximum of Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMAXUB", Summary: "Maximum of Packed Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMAXUD", Summary: "Maximum of Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMAXUW", Summary: "Maximum of Packed Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMINSB", Summary: "Minimum of Packed Signed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMINSD", Summary: "Minimum of Packed Signed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMINSW", Summary: "Minimum of Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMINUB", Summary: "Minimum of Packed Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMINUD", Summary: "Minimum of Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMINUW", Summary: "Minimum of Packed Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVMSKB", Summary: "Move Byte Mask", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVSXBD", Summary: "Move Packed Byte Integers to Doubleword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVSXBQ", Summary: "Move Packed Byte Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVSXBW", Summary: "Move Packed Byte Integers to Word Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVSXDQ", Summary: "Move Packed Doubleword Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVSXWD", Summary: "Move Packed Word Integers to Doubleword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVSXWQ", Summary: "Move Packed Word Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVZXBD", Summary: "Move Packed Byte Integers to Doubleword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVZXBQ", Summary: "Move Packed Byte Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVZXBW", Summary: "Move Packed Byte Integers to Word Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVZXDQ", Summary: "Move Packed Doubleword Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVZXWD", Summary: "Move Packed Word Integers to Doubleword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMOVZXWQ", Summary: "Move Packed Word Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMULDQ", Summary: "Multiply Packed Signed Doubleword Integers and Store Quadword Result", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMULHRSW", Summary: "Packed Multiply Signed Word Integers and Store High Result with Round and Scale", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMULHUW", Summary: "Multiply Packed Unsigned Word Integers and Store High Result", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMULHW", Summary: "Multiply Packed Signed Word Integers and Store High Result", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMULLD", Summary: "Multiply Packed Signed Doubleword Integers and Store Low Result", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMULLW", Summary: "Multiply Packed Signed Word Integers and Store Low Result", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PMULULQ", Summary: "Multiply Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "POPCNTL", Summary: "Count of Number of Bits Set to 1", Forms: []inst.Form{inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "POPCNTQ", Summary: "Count of Number of Bits Set to 1", Forms: []inst.Form{inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "POPCNTW", Summary: "Count of Number of Bits Set to 1", Forms: []inst.Form{inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"POPCNT"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "POPQ", Summary: "Pop a Value from the Stack", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "POPW", Summary: "Pop a Value from the Stack", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "POR", Summary: "Packed Bitwise Logical OR", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PREFETCHNTA", Summary: "Prefetch Data Into Caches using NTA Hint", Forms: []inst.Form{inst.Form{ISA: []string{"MMX+"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PREFETCHT0", Summary: "Prefetch Data Into Caches using T0 Hint", Forms: []inst.Form{inst.Form{ISA: []string{"MMX+"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PREFETCHT1", Summary: "Prefetch Data Into Caches using T1 Hint", Forms: []inst.Form{inst.Form{ISA: []string{"MMX+"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PREFETCHT2", Summary: "Prefetch Data Into Caches using T2 Hint", Forms: []inst.Form{inst.Form{ISA: []string{"MMX+"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSADBW", Summary: "Compute Sum of Absolute Differences", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSHUFB", Summary: "Packed Shuffle Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSHUFHW", Summary: "Shuffle Packed High Words", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSHUFL", Summary: "Shuffle Packed Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSHUFLW", Summary: "Shuffle Packed Low Words", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSIGNB", Summary: "Packed Sign of Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSIGND", Summary: "Packed Sign of Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSIGNW", Summary: "Packed Sign of Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSSE3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSLLDQ", Summary: "Shift Packed Double Quadword Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSLLL", Summary: "Shift Packed Doubleword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSLLO", Summary: "Shift Packed Double Quadword Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSLLQ", Summary: "Shift Packed Quadword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSLLW", Summary: "Shift Packed Word Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSRAL", Summary: "Shift Packed Doubleword Data Right Arithmetic", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSRAW", Summary: "Shift Packed Word Data Right Arithmetic", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSRLDQ", Summary: "Shift Packed Double Quadword Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSRLL", Summary: "Shift Packed Doubleword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSRLO", Summary: "Shift Packed Double Quadword Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSRLQ", Summary: "Shift Packed Quadword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSRLW", Summary: "Shift Packed Word Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSUBB", Summary: "Subtract Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSUBL", Summary: "Subtract Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSUBQ", Summary: "Subtract Packed Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSUBSB", Summary: "Subtract Packed Signed Byte Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSUBSW", Summary: "Subtract Packed Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSUBUSB", Summary: "Subtract Packed Unsigned Byte Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSUBUSW", Summary: "Subtract Packed Unsigned Word Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PSUBW", Summary: "Subtract Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PTEST", Summary: "Packed Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PUNPCKHBW", Summary: "Unpack and Interleave High-Order Bytes into Words", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PUNPCKHLQ", Summary: "Unpack and Interleave High-Order Doublewords into Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PUNPCKHQDQ", Summary: "Unpack and Interleave High-Order Quadwords into Double Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PUNPCKHWL", Summary: "Unpack and Interleave High-Order Words into Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PUNPCKLBW", Summary: "Unpack and Interleave Low-Order Bytes into Words", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PUNPCKLLQ", Summary: "Unpack and Interleave Low-Order Doublewords into Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PUNPCKLQDQ", Summary: "Unpack and Interleave Low-Order Quadwords into Double Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PUNPCKLWL", Summary: "Unpack and Interleave Low-Order Words into Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PUSHQ", Summary: "Push Value Onto the Stack", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PUSHW", Summary: "Push Value Onto the Stack", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "PXOR", Summary: "Packed Bitwise Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RCLB", Summary: "Rotate Left through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RCLL", Summary: "Rotate Left through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RCLQ", Summary: "Rotate Left through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RCLW", Summary: "Rotate Left through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RCPPS", Summary: "Compute Approximate Reciprocals of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RCPSS", Summary: "Compute Approximate Reciprocal of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RCRB", Summary: "Rotate Right through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RCRL", Summary: "Rotate Right through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RCRQ", Summary: "Rotate Right through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RCRW", Summary: "Rotate Right through Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RDRANDL", Summary: "Read Random Number", Forms: []inst.Form{inst.Form{ISA: []string{"RDRAND"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RDRANDQ", Summary: "Read Random Number", Forms: []inst.Form{inst.Form{ISA: []string{"RDRAND"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RDRANDW", Summary: "Read Random Number", Forms: []inst.Form{inst.Form{ISA: []string{"RDRAND"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RDSEEDL", Summary: "Read Random SEED", Forms: []inst.Form{inst.Form{ISA: []string{"RDSEED"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RDSEEDQ", Summary: "Read Random SEED", Forms: []inst.Form{inst.Form{ISA: []string{"RDSEED"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RDSEEDW", Summary: "Read Random SEED", Forms: []inst.Form{inst.Form{ISA: []string{"RDSEED"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RDTSC", Summary: "Read Time-Stamp Counter", Forms: []inst.Form{inst.Form{ISA: []string{"RDTSC"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}}}}, inst.Instruction{Opcode: "RDTSCP", Summary: "Read Time-Stamp Counter and Processor ID", Forms: []inst.Form{inst.Form{ISA: []string{"RDTSCP"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x2}, inst.ImplicitOperand{Register: "ecx", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}}}}, inst.Instruction{Opcode: "RET", Summary: "Return from Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RETFL", Summary: "Return from Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RETFQ", Summary: "Return from Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RETFW", Summary: "Return from Procedure", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ROLB", Summary: "Rotate Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ROLL", Summary: "Rotate Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ROLQ", Summary: "Rotate Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ROLW", Summary: "Rotate Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RORB", Summary: "Rotate Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RORL", Summary: "Rotate Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RORQ", Summary: "Rotate Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RORW", Summary: "Rotate Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RORXL", Summary: "Rotate Right Logical Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RORXQ", Summary: "Rotate Right Logical Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ROUNDPD", Summary: "Round Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ROUNDPS", Summary: "Round Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ROUNDSD", Summary: "Round Scalar Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "ROUNDSS", Summary: "Round Scalar Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE4.1"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RSQRTPS", Summary: "Compute Reciprocals of Square Roots of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "RSQRTSS", Summary: "Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SALB", Summary: "Arithmetic Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SALL", Summary: "Arithmetic Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SALQ", Summary: "Arithmetic Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SALW", Summary: "Arithmetic Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SARB", Summary: "Arithmetic Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SARL", Summary: "Arithmetic Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SARQ", Summary: "Arithmetic Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SARW", Summary: "Arithmetic Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SARXL", Summary: "Arithmetic Shift Right Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SARXQ", Summary: "Arithmetic Shift Right Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SBBB", Summary: "Subtract with Borrow", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SBBL", Summary: "Subtract with Borrow", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SBBQ", Summary: "Subtract with Borrow", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SBBW", Summary: "Subtract with Borrow", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETCC", Summary: "Set byte if above or equal (CF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETCS", Summary: "Set byte if below (CF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETEQ", Summary: "Set byte if equal (ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETGE", Summary: "Set byte if greater or equal (SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETGT", Summary: "Set byte if greater (ZF == 0 and SF == OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETHI", Summary: "Set byte if above (CF == 0 and ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETLE", Summary: "Set byte if less or equal (ZF == 1 or SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETLS", Summary: "Set byte if below or equal (CF == 1 or ZF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETLT", Summary: "Set byte if less (SF != OF)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETMI", Summary: "Set byte if sign (SF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETNE", Summary: "Set byte if not equal (ZF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETOC", Summary: "Set byte if not overflow (OF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETOS", Summary: "Set byte if overflow (OF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETPC", Summary: "Set byte if not parity (PF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETPL", Summary: "Set byte if not sign (SF == 0)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SETPS", Summary: "Set byte if parity (PF == 1)", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SFENCE", Summary: "Store Fence", Forms: []inst.Form{inst.Form{ISA: []string{"MMX+"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHA1MSG1", Summary: "Perform an Intermediate Calculation for the Next Four SHA1 Message Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHA1MSG2", Summary: "Perform a Final Calculation for the Next Four SHA1 Message Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHA1NEXTE", Summary: "Calculate SHA1 State Variable E after Four Rounds", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHA1RNDS4", Summary: "Perform Four Rounds of SHA1 Operation", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "imm2u", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "imm2u", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHA256MSG1", Summary: "Perform an Intermediate Calculation for the Next Four SHA256 Message Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHA256MSG2", Summary: "Perform a Final Calculation for the Next Four SHA256 Message Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHA256RNDS2", Summary: "Perform Two Rounds of SHA256 Operation", Forms: []inst.Form{inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SHA"}, Operands: []inst.Operand{inst.Operand{Type: "xmm0", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHLB", Summary: "Logical Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHLL", Summary: "Logical Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHLQ", Summary: "Logical Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHLW", Summary: "Logical Shift Left", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHLXL", Summary: "Logical Shift Left Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHLXQ", Summary: "Logical Shift Left Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHRB", Summary: "Logical Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHRL", Summary: "Logical Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHRQ", Summary: "Logical Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHRW", Summary: "Logical Shift Right", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "1", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "cl", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHRXL", Summary: "Logical Shift Right Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHRXQ", Summary: "Logical Shift Right Without Affecting Flags", Forms: []inst.Form{inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI2"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHUFPD", Summary: "Shuffle Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SHUFPS", Summary: "Shuffle Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SQRTPD", Summary: "Compute Square Roots of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SQRTPS", Summary: "Compute Square Roots of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SQRTSD", Summary: "Compute Square Root of Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SQRTSS", Summary: "Compute Square Root of Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "STC", Summary: "Set Carry Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "STD", Summary: "Set Direction Flag", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "STMXCSR", Summary: "Store MXCSR Register State", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SUBB", Summary: "Subtract", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SUBL", Summary: "Subtract", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SUBPD", Summary: "Subtract Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SUBPS", Summary: "Subtract Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SUBQ", Summary: "Subtract", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SUBSD", Summary: "Subtract Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SUBSS", Summary: "Subtract Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SUBW", Summary: "Subtract", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "SYSCALL", Summary: "Fast System Call", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "r11", Action: 0x2}, inst.ImplicitOperand{Register: "rcx", Action: 0x2}}}}}, inst.Instruction{Opcode: "TESTB", Summary: "Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "TESTL", Summary: "Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "TESTQ", Summary: "Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "TESTW", Summary: "Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "TZCNTL", Summary: "Count the Number of Trailing Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "TZCNTQ", Summary: "Count the Number of Trailing Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "TZCNTW", Summary: "Count the Number of Trailing Zero Bits", Forms: []inst.Form{inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"BMI"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "UCOMISD", Summary: "Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "UCOMISS", Summary: "Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "UD2", Summary: "Undefined Instruction", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "UNPCKHPD", Summary: "Unpack and Interleave High Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "UNPCKHPS", Summary: "Unpack and Interleave High Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "UNPCKLPD", Summary: "Unpack and Interleave Low Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "UNPCKLPS", Summary: "Unpack and Interleave Low Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VADDPD", Summary: "Add Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VADDPS", Summary: "Add Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VADDSD", Summary: "Add Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VADDSS", Summary: "Add Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VADDSUBPD", Summary: "Packed Double-FP Add/Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VADDSUBPS", Summary: "Packed Single-FP Add/Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VAESDEC", Summary: "Perform One Round of an AES Decryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VAESDECLAST", Summary: "Perform Last Round of an AES Decryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VAESENC", Summary: "Perform One Round of an AES Encryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VAESENCLAST", Summary: "Perform Last Round of an AES Encryption Flow", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VAESIMC", Summary: "Perform the AES InvMixColumn Transformation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VAESKEYGENASSIST", Summary: "AES Round Key Generation Assist", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX", "AES"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VANDNPD", Summary: "Bitwise Logical AND NOT of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VANDNPS", Summary: "Bitwise Logical AND NOT of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VANDPD", Summary: "Bitwise Logical AND of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VANDPS", Summary: "Bitwise Logical AND of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VBLENDPD", Summary: "Blend Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VBLENDPS", Summary: " Blend Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VBLENDVPD", Summary: " Variable Blend Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VBLENDVPS", Summary: " Variable Blend Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VBROADCASTF128", Summary: "Broadcast 128 Bit of Floating-Point Data", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VBROADCASTI128", Summary: "Broadcast 128 Bits of Integer Data", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VBROADCASTSD", Summary: "Broadcast Double-Precision Floating-Point Element", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VBROADCASTSS", Summary: "Broadcast Single-Precision Floating-Point Element", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCMPPD", Summary: "Compare Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCMPPS", Summary: "Compare Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCMPSD", Summary: "Compare Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCMPSS", Summary: "Compare Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCOMISD", Summary: "Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCOMISS", Summary: "Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTDQ2PD", Summary: "Convert Packed Dword Integers to Packed Double-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTDQ2PS", Summary: "Convert Packed Dword Integers to Packed Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTPD2DQX", Summary: "Convert Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTPD2DQY", Summary: "Convert Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTPD2PSX", Summary: "Convert Packed Double-Precision FP Values to Packed Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTPD2PSY", Summary: "Convert Packed Double-Precision FP Values to Packed Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTPH2PS", Summary: "Convert Half-Precision FP Values to Single-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTPS2DQ", Summary: "Convert Packed Single-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTPS2PD", Summary: "Convert Packed Single-Precision FP Values to Packed Double-Precision FP Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTPS2PH", Summary: "Convert Single-Precision FP value to Half-Precision FP value", Forms: []inst.Form{inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"F16C"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTSD2SI", Summary: "Convert Scalar Double-Precision FP Value to Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTSD2SIQ", Summary: "Convert Scalar Double-Precision FP Value to Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTSD2SS", Summary: "Convert Scalar Double-Precision FP Value to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTSI2SDL", Summary: "Convert Dword Integer to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTSI2SDQ", Summary: "Convert Dword Integer to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTSI2SSL", Summary: "Convert Dword Integer to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTSI2SSQ", Summary: "Convert Dword Integer to Scalar Single-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTSS2SD", Summary: "Convert Scalar Single-Precision FP Value to Scalar Double-Precision FP Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTSS2SI", Summary: "Convert Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTSS2SIQ", Summary: "Convert Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTTPD2DQX", Summary: "Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTTPD2DQY", Summary: "Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTTPS2DQ", Summary: "Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTTSD2SI", Summary: "Convert with Truncation Scalar Double-Precision FP Value to Signed Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTTSD2SIQ", Summary: "Convert with Truncation Scalar Double-Precision FP Value to Signed Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTTSS2SI", Summary: "Convert with Truncation Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VCVTTSS2SIQ", Summary: "Convert with Truncation Scalar Single-Precision FP Value to Dword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VDIVPD", Summary: "Divide Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VDIVPS", Summary: "Divide Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VDIVSD", Summary: "Divide Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VDIVSS", Summary: "Divide Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VDPPD", Summary: "Dot Product of Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VDPPS", Summary: "Dot Product of Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VEXTRACTF128", Summary: "Extract Packed Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VEXTRACTI128", Summary: "Extract Packed Integer Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VEXTRACTPS", Summary: "Extract Packed Single Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD132PD", Summary: "Fused Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD132PS", Summary: "Fused Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD132SD", Summary: "Fused Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD132SS", Summary: "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD213PD", Summary: "Fused Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD213PS", Summary: "Fused Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD213SD", Summary: "Fused Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD213SS", Summary: "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD231PD", Summary: "Fused Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD231PS", Summary: "Fused Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD231SD", Summary: "Fused Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADD231SS", Summary: "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADDSUB132PD", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADDSUB132PS", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADDSUB213PD", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADDSUB213PS", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADDSUB231PD", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMADDSUB231PS", Summary: "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB132PD", Summary: "Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB132PS", Summary: "Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB132SD", Summary: "Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB132SS", Summary: "Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB213PD", Summary: "Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB213PS", Summary: "Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB213SD", Summary: "Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB213SS", Summary: "Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB231PD", Summary: "Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB231PS", Summary: "Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB231SD", Summary: "Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUB231SS", Summary: "Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUBADD132PD", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUBADD132PS", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUBADD213PD", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUBADD213PS", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUBADD231PD", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFMSUBADD231PS", Summary: "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD132PD", Summary: "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD132PS", Summary: "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD132SD", Summary: "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD132SS", Summary: "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD213PD", Summary: "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD213PS", Summary: "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD213SD", Summary: "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD213SS", Summary: "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD231PD", Summary: "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD231PS", Summary: "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD231SD", Summary: "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMADD231SS", Summary: "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB132PD", Summary: "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB132PS", Summary: "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB132SD", Summary: "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB132SS", Summary: "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB213PD", Summary: "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB213PS", Summary: "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB213SD", Summary: "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB213SS", Summary: "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB231PD", Summary: "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB231PS", Summary: "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB231SD", Summary: "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VFNMSUB231SS", Summary: "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"FMA3"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VGATHERDPD", Summary: "Gather Packed Double-Precision Floating-Point Values Using Signed Doubleword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VGATHERDPS", Summary: "Gather Packed Single-Precision Floating-Point Values Using Signed Doubleword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm32y", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VGATHERQPD", Summary: "Gather Packed Double-Precision Floating-Point Values Using Signed Quadword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm64y", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VGATHERQPS", Summary: "Gather Packed Single-Precision Floating-Point Values Using Signed Quadword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64y", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VHADDPD", Summary: "Packed Double-FP Horizontal Add", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VHADDPS", Summary: "Packed Single-FP Horizontal Add", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VHSUBPD", Summary: "Packed Double-FP Horizontal Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VHSUBPS", Summary: "Packed Single-FP Horizontal Subtract", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VINSERTF128", Summary: "Insert Packed Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VINSERTI128", Summary: "Insert Packed Integer Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VINSERTPS", Summary: "Insert Packed Single Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VLDDQU", Summary: "Load Unaligned Integer 128 Bits", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VLDMXCSR", Summary: "Load MXCSR Register", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMASKMOVDQU", Summary: "Store Selected Bytes of Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "rdi", Action: 0x1}}}}}, inst.Instruction{Opcode: "VMASKMOVPD", Summary: "Conditional Move Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMASKMOVPS", Summary: "Conditional Move Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMAXPD", Summary: "Return Maximum Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMAXPS", Summary: "Return Maximum Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMAXSD", Summary: "Return Maximum Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMAXSS", Summary: "Return Maximum Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMINPD", Summary: "Return Minimum Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMINPS", Summary: "Return Minimum Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMINSD", Summary: "Return Minimum Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMINSS", Summary: "Return Minimum Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVAPD", Summary: "Move Aligned Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVAPS", Summary: "Move Aligned Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVD", Summary: "Move Doubleword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVDDUP", Summary: "Move One Double-FP and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVDQA", Summary: "Move Aligned Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVDQU", Summary: "Move Unaligned Double Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVHLPS", Summary: "Move Packed Single-Precision Floating-Point Values High to Low", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVHPD", Summary: "Move High Packed Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVHPS", Summary: "Move High Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVLHPS", Summary: "Move Packed Single-Precision Floating-Point Values Low to High", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVLPD", Summary: "Move Low Packed Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVLPS", Summary: "Move Low Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVMSKPD", Summary: "Extract Packed Double-Precision Floating-Point Sign Mask", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVMSKPS", Summary: "Extract Packed Single-Precision Floating-Point Sign Mask", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVNTDQ", Summary: "Store Double Quadword Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVNTDQA", Summary: "Load Double Quadword Non-Temporal Aligned Hint", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVNTPD", Summary: "Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVNTPS", Summary: "Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVQ", Summary: "Move Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVSD", Summary: "Move Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVSHDUP", Summary: "Move Packed Single-FP High and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVSLDUP", Summary: "Move Packed Single-FP Low and Duplicate", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVSS", Summary: "Move Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVUPD", Summary: "Move Unaligned Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMOVUPS", Summary: "Move Unaligned Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMPSADBW", Summary: "Compute Multiple Packed Sums of Absolute Difference", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMULPD", Summary: "Multiply Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMULPS", Summary: "Multiply Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMULSD", Summary: "Multiply Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VMULSS", Summary: "Multiply Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VORPD", Summary: "Bitwise Logical OR of Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VORPS", Summary: "Bitwise Logical OR of Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPABSB", Summary: "Packed Absolute Value of Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPABSD", Summary: "Packed Absolute Value of Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPABSW", Summary: "Packed Absolute Value of Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPACKSSDW", Summary: "Pack Doublewords into Words with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPACKSSWB", Summary: "Pack Words into Bytes with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPACKUSDW", Summary: "Pack Doublewords into Words with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPACKUSWB", Summary: "Pack Words into Bytes with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPADDB", Summary: "Add Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPADDD", Summary: "Add Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPADDQ", Summary: "Add Packed Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPADDSB", Summary: "Add Packed Signed Byte Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPADDSW", Summary: "Add Packed Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPADDUSB", Summary: "Add Packed Unsigned Byte Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPADDUSW", Summary: "Add Packed Unsigned Word Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPADDW", Summary: "Add Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPALIGNR", Summary: "Packed Align Right", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPAND", Summary: "Packed Bitwise Logical AND", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPANDN", Summary: "Packed Bitwise Logical AND NOT", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPAVGB", Summary: "Average Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPAVGW", Summary: "Average Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPBLENDD", Summary: "Blend Packed Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPBLENDVB", Summary: "Variable Blend Packed Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPBLENDW", Summary: "Blend Packed Words", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPBROADCASTB", Summary: "Broadcast Byte Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPBROADCASTD", Summary: "Broadcast Doubleword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPBROADCASTQ", Summary: "Broadcast Quadword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPBROADCASTW", Summary: "Broadcast Word Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPCLMULQDQ", Summary: "Carry-Less Quadword Multiplication", Forms: []inst.Form{inst.Form{ISA: []string{"AVX", "PCLMULQDQ"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX", "PCLMULQDQ"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPCMPEQB", Summary: "Compare Packed Byte Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPCMPEQD", Summary: "Compare Packed Doubleword Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPCMPEQQ", Summary: "Compare Packed Quadword Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPCMPEQW", Summary: "Compare Packed Word Data for Equality", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPCMPESTRI", Summary: "Packed Compare Explicit Length Strings, Return Index", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x1}}}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "ecx", Action: 0x2}, inst.ImplicitOperand{Register: "edx", Action: 0x1}}}}}, inst.Instruction{Opcode: "VPCMPESTRM", Summary: "Packed Compare Explicit Length Strings, Return Mask", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x1}, inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x1}, inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}}}}, inst.Instruction{Opcode: "VPCMPGTB", Summary: "Compare Packed Signed Byte Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPCMPGTD", Summary: "Compare Packed Signed Doubleword Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPCMPGTQ", Summary: "Compare Packed Data for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPCMPGTW", Summary: "Compare Packed Signed Word Integers for Greater Than", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPCMPISTRI", Summary: "Packed Compare Implicit Length Strings, Return Index", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ecx", Action: 0x2}}}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "ecx", Action: 0x2}}}}}, inst.Instruction{Opcode: "VPCMPISTRM", Summary: "Packed Compare Implicit Length Strings, Return Mask", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "xmm0", Action: 0x2}}}}}, inst.Instruction{Opcode: "VPERM2F128", Summary: "Permute Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPERM2I128", Summary: "Permute 128-Bit Integer Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPERMD", Summary: "Permute Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPERMILPD", Summary: "Permute Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPERMILPS", Summary: "Permute Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPERMPD", Summary: "Permute Double-Precision Floating-Point Elements", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPERMPS", Summary: "Permute Single-Precision Floating-Point Elements", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPERMQ", Summary: "Permute Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPEXTRB", Summary: "Extract Byte", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPEXTRD", Summary: "Extract Doubleword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPEXTRQ", Summary: "Extract Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPEXTRW", Summary: "Extract Word", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPGATHERDD", Summary: "Gather Packed Doubleword Values Using Signed Doubleword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm32y", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPGATHERDQ", Summary: "Gather Packed Quadword Values Using Signed Doubleword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm32x", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPGATHERQD", Summary: "Gather Packed Doubleword Values Using Signed Quadword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64y", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPGATHERQQ", Summary: "Gather Packed Quadword Values Using Signed Quadword Indices", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x3}, inst.Operand{Type: "vm64x", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x3}, inst.Operand{Type: "vm64y", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPHADDD", Summary: "Packed Horizontal Add Doubleword Integer", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPHADDSW", Summary: "Packed Horizontal Add Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPHADDW", Summary: "Packed Horizontal Add Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPHMINPOSUW", Summary: "Packed Horizontal Minimum of Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPHSUBD", Summary: "Packed Horizontal Subtract Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPHSUBSW", Summary: "Packed Horizontal Subtract Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPHSUBW", Summary: "Packed Horizontal Subtract Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPINSRB", Summary: "Insert Byte", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPINSRD", Summary: "Insert Doubleword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPINSRQ", Summary: "Insert Quadword", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPINSRW", Summary: "Insert Word", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMADDUBSW", Summary: "Multiply and Add Packed Signed and Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMADDWD", Summary: "Multiply and Add Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMASKMOVD", Summary: "Conditional Move Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMASKMOVQ", Summary: "Conditional Move Packed Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "m128", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "m256", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMAXSB", Summary: "Maximum of Packed Signed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMAXSD", Summary: "Maximum of Packed Signed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMAXSW", Summary: "Maximum of Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMAXUB", Summary: "Maximum of Packed Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMAXUD", Summary: "Maximum of Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMAXUW", Summary: "Maximum of Packed Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMINSB", Summary: "Minimum of Packed Signed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMINSD", Summary: "Minimum of Packed Signed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMINSW", Summary: "Minimum of Packed Signed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMINUB", Summary: "Minimum of Packed Unsigned Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMINUD", Summary: "Minimum of Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMINUW", Summary: "Minimum of Packed Unsigned Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVMSKB", Summary: "Move Byte Mask", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVSXBD", Summary: "Move Packed Byte Integers to Doubleword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVSXBQ", Summary: "Move Packed Byte Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVSXBW", Summary: "Move Packed Byte Integers to Word Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVSXDQ", Summary: "Move Packed Doubleword Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVSXWD", Summary: "Move Packed Word Integers to Doubleword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVSXWQ", Summary: "Move Packed Word Integers to Quadword Integers with Sign Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVZXBD", Summary: "Move Packed Byte Integers to Doubleword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVZXBQ", Summary: "Move Packed Byte Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVZXBW", Summary: "Move Packed Byte Integers to Word Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVZXDQ", Summary: "Move Packed Doubleword Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVZXWD", Summary: "Move Packed Word Integers to Doubleword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMOVZXWQ", Summary: "Move Packed Word Integers to Quadword Integers with Zero Extension", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMULDQ", Summary: "Multiply Packed Signed Doubleword Integers and Store Quadword Result", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMULHRSW", Summary: "Packed Multiply Signed Word Integers and Store High Result with Round and Scale", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMULHUW", Summary: "Multiply Packed Unsigned Word Integers and Store High Result", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMULHW", Summary: "Multiply Packed Signed Word Integers and Store High Result", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMULLD", Summary: "Multiply Packed Signed Doubleword Integers and Store Low Result", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMULLW", Summary: "Multiply Packed Signed Word Integers and Store Low Result", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPMULUDQ", Summary: "Multiply Packed Unsigned Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPOR", Summary: "Packed Bitwise Logical OR", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSADBW", Summary: "Compute Sum of Absolute Differences", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSHUFB", Summary: "Packed Shuffle Bytes", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSHUFD", Summary: "Shuffle Packed Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSHUFHW", Summary: "Shuffle Packed High Words", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSHUFLW", Summary: "Shuffle Packed Low Words", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSIGNB", Summary: "Packed Sign of Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSIGND", Summary: "Packed Sign of Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSIGNW", Summary: "Packed Sign of Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSLLD", Summary: "Shift Packed Doubleword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSLLDQ", Summary: "Shift Packed Double Quadword Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSLLQ", Summary: "Shift Packed Quadword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSLLVD", Summary: "Variable Shift Packed Doubleword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSLLVQ", Summary: "Variable Shift Packed Quadword Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSLLW", Summary: "Shift Packed Word Data Left Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSRAD", Summary: "Shift Packed Doubleword Data Right Arithmetic", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSRAVD", Summary: "Variable Shift Packed Doubleword Data Right Arithmetic", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSRAW", Summary: "Shift Packed Word Data Right Arithmetic", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSRLD", Summary: "Shift Packed Doubleword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSRLDQ", Summary: "Shift Packed Double Quadword Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSRLQ", Summary: "Shift Packed Quadword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSRLVD", Summary: "Variable Shift Packed Doubleword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSRLVQ", Summary: "Variable Shift Packed Quadword Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSRLW", Summary: "Shift Packed Word Data Right Logical", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSUBB", Summary: "Subtract Packed Byte Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSUBD", Summary: "Subtract Packed Doubleword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSUBQ", Summary: "Subtract Packed Quadword Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSUBSB", Summary: "Subtract Packed Signed Byte Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSUBSW", Summary: "Subtract Packed Signed Word Integers with Signed Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSUBUSB", Summary: "Subtract Packed Unsigned Byte Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSUBUSW", Summary: "Subtract Packed Unsigned Word Integers with Unsigned Saturation", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPSUBW", Summary: "Subtract Packed Word Integers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPTEST", Summary: "Packed Logical Compare", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPUNPCKHBW", Summary: "Unpack and Interleave High-Order Bytes into Words", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPUNPCKHDQ", Summary: "Unpack and Interleave High-Order Doublewords into Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPUNPCKHQDQ", Summary: "Unpack and Interleave High-Order Quadwords into Double Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPUNPCKHWD", Summary: "Unpack and Interleave High-Order Words into Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPUNPCKLBW", Summary: "Unpack and Interleave Low-Order Bytes into Words", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPUNPCKLDQ", Summary: "Unpack and Interleave Low-Order Doublewords into Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPUNPCKLQDQ", Summary: "Unpack and Interleave Low-Order Quadwords into Double Quadwords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPUNPCKLWD", Summary: "Unpack and Interleave Low-Order Words into Doublewords", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VPXOR", Summary: "Packed Bitwise Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX2"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VRCPPS", Summary: "Compute Approximate Reciprocals of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VRCPSS", Summary: "Compute Approximate Reciprocal of Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VROUNDPD", Summary: "Round Packed Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VROUNDPS", Summary: "Round Packed Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VROUNDSD", Summary: "Round Scalar Double Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VROUNDSS", Summary: "Round Scalar Single Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VRSQRTPS", Summary: "Compute Reciprocals of Square Roots of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VRSQRTSS", Summary: "Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSHUFPD", Summary: "Shuffle Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSHUFPS", Summary: "Shuffle Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSQRTPD", Summary: "Compute Square Roots of Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSQRTPS", Summary: "Compute Square Roots of Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSQRTSD", Summary: "Compute Square Root of Scalar Double-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSQRTSS", Summary: "Compute Square Root of Scalar Single-Precision Floating-Point Value", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSTMXCSR", Summary: "Store MXCSR Register State", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSUBPD", Summary: "Subtract Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSUBPS", Summary: "Subtract Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSUBSD", Summary: "Subtract Scalar Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VSUBSS", Summary: "Subtract Scalar Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VTESTPD", Summary: "Packed Double-Precision Floating-Point Bit Test", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VTESTPS", Summary: "Packed Single-Precision Floating-Point Bit Test", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VUCOMISD", Summary: "Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VUCOMISS", Summary: "Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VUNPCKHPD", Summary: "Unpack and Interleave High Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VUNPCKHPS", Summary: "Unpack and Interleave High Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VUNPCKLPD", Summary: "Unpack and Interleave Low Packed Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VUNPCKLPS", Summary: "Unpack and Interleave Low Packed Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VXORPD", Summary: "Bitwise Logical XOR for Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VXORPS", Summary: "Bitwise Logical XOR for Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{inst.Operand{Type: "m256", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x1}, inst.Operand{Type: "ymm", Action: 0x2}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VZEROALL", Summary: "Zero All YMM Registers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "VZEROUPPER", Summary: "Zero Upper Bits of YMM Registers", Forms: []inst.Form{inst.Form{ISA: []string{"AVX"}, Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XADDB", Summary: "Exchange and Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XADDL", Summary: "Exchange and Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XADDQ", Summary: "Exchange and Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XADDW", Summary: "Exchange and Add", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XCHGB", Summary: "Exchange Register/Memory with Register", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x3}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x3}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XCHGL", Summary: "Exchange Register/Memory with Register", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "eax", Action: 0x3}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x3}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x3}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XCHGQ", Summary: "Exchange Register/Memory with Register", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "rax", Action: 0x3}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x3}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x3}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XCHGW", Summary: "Exchange Register/Memory with Register", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "ax", Action: 0x3}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x3}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x3}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XGETBV", Summary: "Get Value of Extended Control Register", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "eax", Action: 0x2}, inst.ImplicitOperand{Register: "ecx", Action: 0x1}, inst.ImplicitOperand{Register: "edx", Action: 0x2}}}}}, inst.Instruction{Opcode: "XLAT", Summary: "Table Look-up Translation", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "al", Action: 0x3}, inst.ImplicitOperand{Register: "ebx", Action: 0x1}}}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{}, ImplicitOperands: []inst.ImplicitOperand{inst.ImplicitOperand{Register: "al", Action: 0x3}, inst.ImplicitOperand{Register: "rbx", Action: 0x1}}}}}, inst.Instruction{Opcode: "XORB", Summary: "Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "al", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m8", Action: 0x1}, inst.Operand{Type: "r8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r8", Action: 0x1}, inst.Operand{Type: "m8", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XORL", Summary: "Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "eax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m32", Action: 0x1}, inst.Operand{Type: "r32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r32", Action: 0x1}, inst.Operand{Type: "m32", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XORPD", Summary: "Bitwise Logical XOR for Double-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE2"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XORPS", Summary: "Bitwise Logical XOR for Single-Precision Floating-Point Values", Forms: []inst.Form{inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "xmm", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string{"SSE"}, Operands: []inst.Operand{inst.Operand{Type: "m128", Action: 0x1}, inst.Operand{Type: "xmm", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XORQ", Summary: "Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "rax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m64", Action: 0x1}, inst.Operand{Type: "r64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm32", Action: 0x0}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r64", Action: 0x1}, inst.Operand{Type: "m64", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}, inst.Instruction{Opcode: "XORW", Summary: "Logical Exclusive OR", Forms: []inst.Form{inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "ax", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "m16", Action: 0x1}, inst.Operand{Type: "r16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm8", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "imm16", Action: 0x0}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}, inst.Form{ISA: []string(nil), Operands: []inst.Operand{inst.Operand{Type: "r16", Action: 0x1}, inst.Operand{Type: "m16", Action: 0x3}}, ImplicitOperands: []inst.ImplicitOperand(nil)}}}}

func TestVerifyInstructionsList(t *testing.T) {
	if !reflect.DeepEqual(raw, inst.Instructions) {
		t.Fatal("bad code generation for instructions list")
	}
}
